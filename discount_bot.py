__author__ = 'Alex Bulavin'
'''
–≠—Ç–æ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å –Ω—É–ª—è. –≠—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!!!
–î–∞–∂–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PEP8
–¢–∞–∫ —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
–ù–æ —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–≥—Ä–∞–¥—ã –∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤

This is just a working example to learn from scratch. This is not production!
Not even PEP8 compliant
So you need to refactor
But breaks down barriers and misunderstandings for beginners
'''
from aiogram import Bot, Dispatcher, executor, types
import os
from aiogram.utils.markdown import hbold, hlink
from aiogram.dispatcher.filters import Text
from main import collect_data
import json
import pandas as pd
import requests
from datetime import datetime
from pythonping import ping
import time
import locale

# –°–æ–∑–¥–∞—ë–º data frame
df_sites = pd.read_csv('/Users/alex/Documents/Python_projects/Dynamic_site_parser_and_telegram_bot/monitored_urls.csv')
print(df_sites, '\nLine 15')
#    df_logs = pd.read_csv('/Users/alex/Documents/Python_projects/website_monitor/sites_monitoing_log.csv')

# Done! Congratulations on your new bot. You will find it at t.me/SalomonParser_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you've finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.
#
# Use this token to access the HTTP API:
# 2052937653:AAGgdW******************* #–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
# Keep your token secure and store it safely, it can be used by anyone to control your bot.
#
# For a description of the Bot API, see this page: https://core.telegram.org/bots/api

#–°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–æ–∫–µ–Ω
bot = Bot(token='2052937653:AAGgdW*******************', parse_mode=types.ParseMode.HTML)
#–ü–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: https://boto.agency/blog/kak-polychit-api-token-telegram/
userid = '@S**********_bot' # –ó–∞–¥–∞—ë–º –∏–º—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
#bot = Bot(token=os.getenv('TOKEN'))

#–°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot)
print(locale.getlocale(category=locale.LC_ALL))
locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))#

def send_message(message):

    """
    –ü–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    bot.send_message(userid, message, parse_mode='HTML', disable_web_page_preview=True)
    print('I am in send_message(message)')

#–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ—ë
@dp.message_handler(commands='start')
async def start(message: types.Message):
    #–û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # start_buttons = ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤", "–ö—Ä—É–ø–∞"]
    start_buttons = ["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤"]
    #–°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã..', reply_markup=keyboard)
    time.sleep(2)
    while True:
#–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª.
        if datetime.now().strftime("%H:%M") == "09:00:00": #–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –∂–∏–≤ –∏ —Å–µ—Ä–≤–∏—Å –∂–∏–≤.

            await message.answer("Hi Boss, I am alive!")

        for index, website in df_sites.iterrows():

            try:
                response = requests.get(
                    website[0])  # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω—É–∂–Ω–æ–º—É —Å–∞–π—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é response
                # print(website[0], " is ", response.status_code)
                if response.status_code == 200:  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ https://docs-python.ru/standart-library/modul-datetime-python/kody-formatirovanija-strftime-strptime-modulja-datetime/
                    result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n' \
                             f'{website[0]} ' \
                             'OK'
                else:
                    result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n' \
                             f'{website[0]} ' \
                             f'error {response.status_code}'
                    await message.answer(result)
                print(result)

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫: https://www.restapitutorial.com/httpstatuscodes.html
            except:
                result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n' \
                         f'{website[0]}' \
                         ' –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
                print(result)
                await message.answer(result)
#   send_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        time.sleep(600)

#–ü–∏—à–µ–º handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–æ—Å—Å–æ–≤–æ–∫
@dp.message_handler(Text(equals="–ö—Ä–æ—Å—Å–æ–≤–∫–∏"))
async def get_discount_sneakers(message: types.Message):
    await message.answer("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")
    collect_data()

    with open('result_data.json') as file:
        data = json.load(file)

    for item in data:#–ò–¥—ë–º –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞
        card = f"{hlink(item.get('title'), item.get('link'))}\n" \
            f"{hbold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ')} {item.get('category')}\n" \
            f"{hbold('–ü—Ä–∞–π—Å: ')} {item.get('price_base')}\n" \
            f"{hbold('–ü—Ä–∞–π—Å —Å–æ —Å–∫–∏–¥–∫–æ–π: ')} -{item.get('discount_percent')}%: {item.get('price_sale')}üî•"

        await message.answer(card)

@dp.message_handler(Text(equals="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤"))
async def get_sites_monitoring(message: types.Message):
    await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É, –ø—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã...')

    for index, website in df_sites.iterrows():
        try:
            response = requests.get(
                website[0])  # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω—É–∂–Ω–æ–º—É —Å–∞–π—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é response
            # print(website[0], " is ", response.status_code)
            if response.status_code == 200: #–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ https://docs-python.ru/standart-library/modul-datetime-python/kody-formatirovanija-strftime-strptime-modulja-datetime/
                result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n' \
                         f'{website[0]} ' \
                         'OK'
            else:
                result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n' \
                         f'{website[0]} ' \
                         f'error {response.status_code}'
            print(result)
            await message.answer(result)
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫: https://www.restapitutorial.com/httpstatuscodes.html
        except:
            result = f'{datetime.now().strftime("%d %B %Y %H:%M:%S")}\n'\
                f'{website[0]}'\
                ' –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
            print(result)
            await message.answer(result)

@dp.message_handler(Text(equals="–ö—Ä—É–ø–∞"))
async def get_discount_sneakers(message: types.Message):
    await message.answer('Please wait –ö—Ä—É–ø–∞')

# def send_message(message):
#
#     """
#     –ü–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     """
#     bot.send_message('@UserName', 'message 1', parse_mode='HTML', disable_web_page_preview=True)
#     bot.send_message(userid, message, parse_mode='HTML', disable_web_page_preview=True)
#     print('I am in send_message(message)')

def ping_host(address):
    """
    –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –•–æ—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–µ—Ç–∏. –ï—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è,
    —Ç–æ –µ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –Ω–µ –≤ —Å–µ—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω
    –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ç–∏, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏ —Ç–æ–∂–µ –ø–æ—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """

    if ping_url(address):
        if not address.status:
            address.status = True
            send_message(address + " is up again")
    else:
        if (address.status):
            address.status = False
            send_message(address + " is down")
    print('I am in ping_host(address)')

def ping_url(url):
    """
    –ü–∏–Ω–≥ —Ö–æ—Å—Ç–∞. Response list - —ç—Ç–æ –æ—Ç–≤–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ping. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–∞
    –ø–æ—Å—ã–ª–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –ø–∞–∫–µ—Ç–∞. –ï—Å–ª–∏ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–ø–∞–ª–∏, —Ç–æ —Ö–æ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º.
    """

    i = 0;

    try:
        response_list = ping(url)

        for response in response_list:
            if (not response.success):
                i += 1

        if (i == 4):
            return False
        else:
            return True

    except Exception as e:
        send_message(str(e))

    print('I am in ping_url(url)')

def main():
    executor.start_polling(dp)#–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    send_message('message')
    print('line 160')
    """
        –í—Å–µ –ø—Ä–æ—Å—Ç–æ. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–∏–Ω–≥—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.
        """
    while True:
        print('I am in 153 string ')
        for index, website in df_sites.iterrows():
            ping_host(website[0])
            print('I am in 156 string trying ping_host(website[0])')

        time.sleep(600)


if __name__ == "__main__":
    main()
